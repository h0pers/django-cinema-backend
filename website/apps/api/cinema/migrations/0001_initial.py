# Generated by Django 4.2.23 on 2025-09-16 22:59

import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.functions.text
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('uploads', '0001_initial'),
        ('core', '0002_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AudioTrack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hls_file', models.FileField(editable=False, upload_to='')),
                ('is_default', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='CrewMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField()),
                ('picture', models.ImageField(blank=True, null=True, upload_to='')),
                ('slug', models.SlugField()),
            ],
        ),
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('ordering', models.PositiveIntegerField(db_index=True, help_text='Element ordering number', validators=[django.core.validators.MinValueValidator(1)])),
                ('allowed_to_watch', models.BooleanField(default=True)),
                ('poster', models.ImageField(blank=True, null=True, upload_to='')),
                ('publication_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'ordering': ['ordering'],
                'permissions': (('can_watch_episode', 'Watch episode'),),
                'get_latest_by': 'ordering',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=100, unique=True)),
            ],
            options={
                'permissions': (('can_watch_genre', 'Watch all titles in genre'), ('can_watch_genre_movies', 'Watch all movies in genre'), ('can_watch_genre_shows', 'Watch all shows in genre')),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Title',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('allowed_to_watch', models.BooleanField(default=True)),
                ('slug', models.SlugField(max_length=255)),
                ('status', models.CharField(choices=[('published', 'Published'), ('draft', 'Draft')], default='published', max_length=20)),
                ('type', models.CharField(choices=[('movie', 'Movie'), ('show', 'Show')], max_length=20)),
                ('release_year', models.PositiveSmallIntegerField(blank=True, help_text='UTC Timezone', null=True)),
                ('release_date', models.DateTimeField(blank=True, help_text='UTC Timezone', null=True)),
                ('poster', models.ImageField(blank=True, null=True, upload_to='')),
                ('genres', models.ManyToManyField(blank=True, to='cinema.genre')),
                ('languages', models.ManyToManyField(blank=True, to='core.language')),
            ],
            options={
                'permissions': (('can_watch_title', 'Can watch title'), ('can_watch_all', 'Can watch all titles'), ('can_watch_all_movies', 'Can watch all movies'), ('can_watch_all_shows', 'Can watch all shows')),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('created', 'Created'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='created', max_length=20)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('protected', 'Protected')], default='protected', max_length=20)),
                ('role', models.CharField(choices=[('movie', 'Movie'), ('episode', 'Episode'), ('trailer', 'Trailer')], max_length=20)),
                ('hls_master_playlist', models.FileField(blank=True, null=True, upload_to='')),
                ('hls_decrypt_key', models.FileField(blank=True, editable=False, null=True, upload_to='')),
                ('rebuild_needed', models.BooleanField(default=False, editable=False)),
                ('file', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='uploads.lazyloadfile')),
                ('languages', models.ManyToManyField(related_name='video_languages', through='cinema.AudioTrack', to='core.language')),
                ('original_language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.language')),
            ],
        ),
        migrations.CreateModel(
            name='VideoResolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resolution', models.PositiveSmallIntegerField(choices=[(1080, '1080p'), (720, '720p'), (480, '480p'), (360, '360p')])),
                ('file', models.FileField(upload_to='')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resolutions', to='cinema.video')),
            ],
            options={
                'ordering': ['-resolution'],
            },
        ),
        migrations.CreateModel(
            name='TitleCrewMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(choices=[('actor', 'Actor'), ('director', 'Director'), ('writer', 'Writer'), ('producer', 'Producer'), ('cinematographer', 'Cinematographer'), ('editor', 'Editor'), ('composer', 'Composer'), ('production_designer', 'Production Designer'), ('costume_designer', 'Costume Designer'), ('makeup_artist', 'Makeup Artist'), ('sound_designer', 'Sound Designer'), ('visual_effects', 'Visual Effects'), ('stunt_coordinator', 'Stunt Coordinator'), ('other', 'Other')], default='other', max_length=50)),
                ('crew_member', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='titles', to='cinema.crewmember')),
                ('title', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crew_members', to='cinema.title')),
            ],
        ),
        migrations.AddField(
            model_name='title',
            name='trailer',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='as_trailer', to='cinema.video'),
        ),
        migrations.AddField(
            model_name='title',
            name='video',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='as_movie', to='cinema.video'),
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('ordering', models.PositiveIntegerField(db_index=True, help_text='Element ordering number', validators=[django.core.validators.MinValueValidator(1)])),
                ('allowed_to_watch', models.BooleanField(default=True)),
                ('title', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seasons', to='cinema.title')),
            ],
            options={
                'ordering': ['ordering'],
                'permissions': (('can_watch_season', 'Can watch season'),),
                'get_latest_by': 'ordering',
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='genre',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='genre_unique_name'),
        ),
        migrations.AddField(
            model_name='episode',
            name='season',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='episodes', to='cinema.season'),
        ),
        migrations.AddField(
            model_name='episode',
            name='video',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='as_episode', to='cinema.video'),
        ),
        migrations.AddField(
            model_name='audiotrack',
            name='file',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='as_audio_track', to='uploads.lazyloadfile'),
        ),
        migrations.AddField(
            model_name='audiotrack',
            name='language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.language'),
        ),
        migrations.AddField(
            model_name='audiotrack',
            name='video',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audio_tracks', to='cinema.video'),
        ),
        migrations.AddConstraint(
            model_name='videoresolution',
            constraint=models.UniqueConstraint(fields=('video', 'resolution'), name='unique_video_resolution'),
        ),
        migrations.AddConstraint(
            model_name='titlecrewmember',
            constraint=models.UniqueConstraint(fields=('title', 'crew_member', 'position'), name='unique_title_crew_member_position', violation_error_message='Crew member position must be unique'),
        ),
        migrations.AddIndex(
            model_name='title',
            index=django.contrib.postgres.indexes.GinIndex(fields=['name'], name='title_trgm_search_idx', opclasses=['gin_trgm_ops']),
        ),
        migrations.AddIndex(
            model_name='title',
            index=django.contrib.postgres.indexes.GinIndex(django.contrib.postgres.search.SearchVector('name', config='simple'), django.contrib.postgres.search.SearchVector('description', config='simple'), name='title_gin_search_idx'),
        ),
        migrations.AddIndex(
            model_name='season',
            index=django.contrib.postgres.indexes.GinIndex(fields=['name'], name='season_trgm_search_idx', opclasses=['gin_trgm_ops']),
        ),
        migrations.AddIndex(
            model_name='season',
            index=django.contrib.postgres.indexes.GinIndex(django.contrib.postgres.search.SearchVector('name', config='simple'), django.contrib.postgres.search.SearchVector('description', config='simple'), name='season_gin_search_idx'),
        ),
        migrations.AddConstraint(
            model_name='season',
            constraint=models.UniqueConstraint(fields=('title', 'ordering'), name='unique_title_ordering'),
        ),
        migrations.AddIndex(
            model_name='episode',
            index=django.contrib.postgres.indexes.GinIndex(fields=['name'], name='episode_trgm_search_idx', opclasses=['gin_trgm_ops']),
        ),
        migrations.AddIndex(
            model_name='episode',
            index=django.contrib.postgres.indexes.GinIndex(django.contrib.postgres.search.SearchVector('name', config='simple'), django.contrib.postgres.search.SearchVector('description', config='simple'), name='episode_gin_search_idx'),
        ),
        migrations.AddConstraint(
            model_name='episode',
            constraint=models.UniqueConstraint(fields=('ordering', 'season'), name='unique_episode_ordering'),
        ),
        migrations.AddConstraint(
            model_name='audiotrack',
            constraint=models.UniqueConstraint(fields=('video', 'language'), name='unique_video_language'),
        ),
        migrations.AddConstraint(
            model_name='audiotrack',
            constraint=models.UniqueConstraint(condition=models.Q(('is_default', True)), fields=('video', 'is_default'), name='unique_video_is_default'),
        ),
    ]
