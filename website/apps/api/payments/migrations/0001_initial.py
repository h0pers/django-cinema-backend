# Generated by Django 4.2.23 on 2025-09-16 22:59

from django.conf import settings
import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import djmoney.models.fields
import djmoney.models.validators
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('custom_user', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('full_name', models.CharField(blank=True, max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('status', models.CharField(choices=[('canceled', 'Canceled'), ('refunded', 'Refunded'), ('pending', 'Pending'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('paid', models.BooleanField(default=False)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('external_payment_id', models.CharField(db_index=True, editable=False, max_length=255)),
                ('payment_provider', models.CharField(choices=[('manual', 'Manual'), ('stripe', 'Stripe')], db_index=True, default='manual', max_length=20)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount_currency', djmoney.models.fields.CurrencyField(choices=[('USD', 'US Dollar')], default='USD', editable=False, max_length=3)),
                ('amount', djmoney.models.fields.MoneyField(decimal_places=2, max_digits=10)),
                ('paid', models.BooleanField(default=False)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='payments.order')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('trial_interval_count', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('trial_interval', models.CharField(blank=True, choices=[('day', 'Day'), ('month', 'Month'), ('week', 'Week'), ('year', 'Year')], max_length=20)),
                ('billing_interval_count', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('billing_interval', models.CharField(choices=[('day', 'Day'), ('month', 'Month'), ('week', 'Week'), ('year', 'Year')], max_length=20)),
                ('group', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='subscription', to='custom_user.customgroup')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('price_currency', djmoney.models.fields.CurrencyField(choices=[('USD', 'US Dollar')], default='USD', editable=False, max_length=3)),
                ('price', djmoney.models.fields.MoneyField(decimal_places=2, max_digits=10, validators=[djmoney.models.validators.MinMoneyValidator(0)])),
                ('discount_price_currency', djmoney.models.fields.CurrencyField(choices=[('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('discount_price', djmoney.models.fields.MoneyField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)])),
                ('final_price_currency', djmoney.models.fields.CurrencyField(choices=[('USD', 'US Dollar')], default='USD', editable=False, max_length=3)),
                ('final_price', djmoney.models.fields.MoneyField(decimal_places=2, max_digits=10, validators=[djmoney.models.validators.MinMoneyValidator(0)])),
                ('type', models.CharField(choices=[('product', 'Product'), ('subscription', 'Subscription')], editable=False, max_length=20)),
                ('slug', models.SlugField(max_length=255)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=20)),
                ('stock', models.PositiveIntegerField(blank=True, null=True)),
                ('subscription', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='product', to='payments.subscription')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('price_currency', djmoney.models.fields.CurrencyField(choices=[('USD', 'US Dollar')], default='USD', editable=False, max_length=3)),
                ('price', djmoney.models.fields.MoneyField(decimal_places=2, max_digits=10, validators=[djmoney.models.validators.MinMoneyValidator(0)])),
                ('discount_price_currency', djmoney.models.fields.CurrencyField(choices=[('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('discount_price', djmoney.models.fields.MoneyField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)])),
                ('final_price_currency', djmoney.models.fields.CurrencyField(choices=[('USD', 'US Dollar')], default='USD', editable=False, max_length=3)),
                ('final_price', djmoney.models.fields.MoneyField(decimal_places=2, max_digits=10, validators=[djmoney.models.validators.MinMoneyValidator(0)])),
                ('type', models.CharField(choices=[('product', 'Product'), ('subscription', 'Subscription')], editable=False, max_length=20)),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='payments.order')),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='payments.product')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='transaction',
            constraint=models.UniqueConstraint(condition=models.Q(('external_payment_id', ''), _negated=True), fields=('external_payment_id',), name='unique_transaction_external_payment_id'),
        ),
        migrations.AddIndex(
            model_name='subscription',
            index=django.contrib.postgres.indexes.GinIndex(fields=['name'], name='subscription_trgm_search_idx', opclasses=['gin_trgm_ops']),
        ),
        migrations.AddIndex(
            model_name='subscription',
            index=django.contrib.postgres.indexes.GinIndex(django.contrib.postgres.search.SearchVector('name', config='simple'), django.contrib.postgres.search.SearchVector('description', config='simple'), name='subscription_gin_search_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=django.contrib.postgres.indexes.GinIndex(fields=['name'], name='product_trgm_search_idx', opclasses=['gin_trgm_ops']),
        ),
        migrations.AddIndex(
            model_name='product',
            index=django.contrib.postgres.indexes.GinIndex(django.contrib.postgres.search.SearchVector('name', config='simple'), django.contrib.postgres.search.SearchVector('description', config='simple'), name='product_gin_search_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=django.contrib.postgres.indexes.GinIndex(fields=['name'], name='orderitem_trgm_search_idx', opclasses=['gin_trgm_ops']),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=django.contrib.postgres.indexes.GinIndex(django.contrib.postgres.search.SearchVector('name', config='simple'), django.contrib.postgres.search.SearchVector('description', config='simple'), name='orderitem_gin_search_idx'),
        ),
        migrations.AddConstraint(
            model_name='orderitem',
            constraint=models.UniqueConstraint(fields=('order', 'product'), name='unique_order_item'),
        ),
    ]
